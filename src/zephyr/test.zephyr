PACKAGE test

{TY find-key-in-db (0 > TreapsDatabase | S Integer) --> (Z > Treap k v | S)}

DEFINE find-key-in-db ==
  [ [ DUP CUR-ATOM int-compare] [[ CUR-ATOM Just ] VISIT-Branch-value] [Nothing] treap-find YIELD] VISIT-TreapsDatabase-db

EXPORT find-key-in-db

DEFINE insert-key ==
  [ !((Treap Integer Text) | *s Integer Text)
    [ [ [ !(Integer | *s Text Integer)
          DUP CUR-ATOM int-compare ] ] DIP ] DIP
    insert-treap ] VISIT-TreapsDatabase-db
EXPORT insert-key

DEFINE all-keys ==
  [ CUR-IS-Branch? ]
  [ [ all-keys ] VISIT-Branch-left
    [ CUR-ATOM
      !(Integer | *s Integer) Just
      YIELD] VISIT-Branch-key
    [ all-keys ] VISIT-Branch-right ]
  [ ]
  IFTE

DEFINE all-keys-db ==
  [ all-keys ] VISIT-TreapsDatabase-db
EXPORT all-keys-db

DEFINE all-values ==
  [ CUR-IS-Branch? ]
  [ [ all-values ] VISIT-Branch-left
    [ CUR-ATOM
      !(Text | *s Text) Just
      YIELD] VISIT-Branch-value
    [ all-values ] VISIT-Branch-right ]
  [ ]
  IFTE
EXPORT all-values

DEFINE count-db-entries ==
  [ treap-size Just YIELD ] VISIT-TreapsDatabase-db
EXPORT count-db-entries

DEFINE yield-this ==
  CUT YIELD

EXPORT yield-this

{TY db-height (0 > TreapsDatabase | S) --> (0 > TreapsDatabase | S Integer)}
DEFINE db-height ==
  CUT { this is a read-only transaction, so we can cut the zipper here, and operate on a read-only replica }
  [ [ treap-height ] VISIT-TreapsDatabase-db ] ENTER-ZIPPER
  ZAP

EXPORT db-height
{
DATA ProductsDatabase ==
  CONS ProductsDatabase products=(Treap Text Product)

DATA Product ==
  CONS Product sku=Text type=ProductType title=Text description=Text pricing=PricingDetails

DATA ProductType ==
  CONS AudioCD
  CONS DVD
  CONS VideoGame

DATA ProductCategory ==
  CONS Jazz
  CONS Action
  CONS RockNRoll
  CONS Adventure
  CONS Comedy
  CONS Music

DATA PricingDetails ==
  CONS PricingDetails list=Floating savings=Floating

DEFINE insert-product ==
  [ "dipped below prio" LOG
    [
      [ CUR-ATOM ] VISIT-sku
      DUP
      [ SWAP int-compare ] CONS
      SWAP { now stack is key, keycmp }
    ] ENTER-ZIPPER
    { now stack is val, key, keycmp }
    SWAP
  ] DIP
  treap-insert

DEFINE insert-products ==
  [ "01234567" AudioCD "John Coltrane" "Some cool music" 5.89 0.10 PricingDetails
    Product
    10 { prio ... TODO Generate RANDOM }
    insert-product

    { "99999999" DUP DVD "Jurassic Park" "Cool movie about dinosaurs" 30.00 1 PricingDetails SWAP
    14
    insert-product}
    ] VISIT-products

  (Z | S)
  (Z | S) --> (Z | S x)
  (Z > k | S) --> (Z > k | S (0 > k))
  (Z > k | S (0 > k) (0 > k | S' --> 0 > k | S')) --> (Z > k | S (0 > k)) }}