PACKAGE treaps

DATA Treap k v ==
  CONS Leaf
  CONS Branch key=k value=v prio=Integer left=(Treap k v) right=(Treap k v)
{  DEFAULT Leaf}

DATA TreapsDatabase ==
  CONS TreapsDatabase db=(Treap Integer Text)

DEFINE insert-treap ==
  { arguments: comparator, key, value }
  !((Treap Integer Text) | *s Integer Text)

  SWAP
  { arguments: comparator, value, key }
  !((Treap Integer Text) | *s Text Integer)

  [ SWAP ] DIP
  { arguments: value, comparator, key }
  !((Treap Integer Text) | *s Text a Integer)

  SWAP
  { arguments: value, key, comparator }
  !((Treap Integer Text) | *s Text Integer a)

  [ { Action on found }
    ZAP [ ZIP-REPLACE ] VISIT-Branch-value
  ]
  [ { Action if not found }
    SWAP RANDOM Leaf Leaf Branch
    ZIP-REPLACE
  ]
  treap-find

DEFINE treap-find ==
  { arguments: key comparator, action at value, action if not found }
  !((Treap k v) | *s (k | *s --> *s CmpResult ) ((Treap k v) | *s --> *s') ((Treap k v) | *s --> *s'))
  [ CUR-IS-Branch? ]
  [ [ [ [ DUP [ I ] DIP SWAP
        ] DIP SWAP
      ] DIP SWAP
    ] VISIT-Branch-key
    [ DUP IS-EQ? ]
    [ ZAP ZAP [ ZAP ] DIP I ]
    [ [ IS-LT? ]
      [ [ treap-find ] VISIT-Branch-left treap-balance-left ]
      [ [ treap-find ] VISIT-Branch-right treap-balance-right ]
      IFTE ]
    IFTE ]
  [ [ZAP ZAP] DIP I ]
  IFTE

DEFINE treap-rotate-right ==
  { Cut the left branch out, and the left's right branch }
  [ CUT
    [ CUT ] VISIT-Branch-right
    { Replace the left branch with the right branch }
    ZIP-REPLACE ] VISIT-Branch-left

  CUT SWAP
  { Now enter the cut left child, and replace it's right child with ourselves }
  [ [ ZIP-REPLACE ] VISIT-Branch-right ] ENTER-ZIPPER

  { Now replace ourself with the newly recast left child }
  ZIP-REPLACE

DEFINE treap-rotate-left ==
  { Cut the right branch out, and the right's left branch }
  [ CUT
    [ CUT ] VISIT-Branch-left
    ZIP-REPLACE ] VISIT-Branch-right

  CUT SWAP
  { Now enter the cut right child, and replace the left child with ourself }
  [ [ ZIP-REPLACE ] VISIT-Branch-left ] ENTER-ZIPPER

  { Now replace ourself with the newly recast right child }
  ZIP-REPLACE

DEFINE treap-balance-left ==
  [ [ CUR-IS-Branch? ] VISIT-Branch-left ]
  [ [ [ [ CUR-ATOM ] VISIT-Branch-prio ] VISIT-Branch-left
      [ CUR-ATOM ] VISIT-Branch-prio
      > ]
    [ treap-rotate-right ] { replace parent with child }
    [ ] { everything is good, do nothing }
    IFTE ]
  [ ] { If it's not a branch, nothing to do }
  IFTE
DEFINE treap-balance-right ==
  [ [ CUR-IS-Branch? ] VISIT-Branch-right ]
  [ [ [ [ CUR-ATOM ] VISIT-Branch-prio ] VISIT-Branch-right
      [ CUR-ATOM ] VISIT-Branch-prio
      > ]
    [ treap-rotate-left ]
    [ ] { Not a branch, do nothing }
    IFTE ]
  [ ]
  IFTE

DEFINE treap-height ==
  [ CUR-IS-Branch? ]
  [ [ treap-height ] VISIT-Branch-left
    [ treap-height ] VISIT-Branch-right
    max
    1 + ]
  [ 0 ]
  IFTE

DEFINE treap-size-rec ==
  [ CUR-IS-Branch? ]
  [ [treap-size-rec] VISIT-Branch-left
    [treap-size-rec] VISIT-Branch-right
    1 + ]
  [ ]
  IFTE

DEFINE treap-size ==
  0 treap-size-rec